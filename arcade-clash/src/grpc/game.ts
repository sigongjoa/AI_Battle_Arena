// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "game";

export interface PlayerState {
  id: number;
  /** e.g., "RYU", "KEN" */
  character: string;
  x: number;
  y: number;
  /** e.g., "idle", "punch", "kick" */
  action: string;
  frame: number;
  health: number;
  superGauge: number;
}

export interface GameState {
  matchId: string;
  timer: number;
  players: PlayerState[];
  winnerId?: number | undefined;
}

/** Request message for streaming game state */
export interface GameStateRequest {
  matchId: string;
  player1Id: number;
  player2Id: number;
}

function createBasePlayerState(): PlayerState {
  return { id: 0, character: "", x: 0, y: 0, action: "", frame: 0, health: 0, superGauge: 0 };
}

export const PlayerState: MessageFns<PlayerState> = {
  encode(message: PlayerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.character !== "") {
      writer.uint32(18).string(message.character);
    }
    if (message.x !== 0) {
      writer.uint32(24).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(32).int32(message.y);
    }
    if (message.action !== "") {
      writer.uint32(42).string(message.action);
    }
    if (message.frame !== 0) {
      writer.uint32(48).int32(message.frame);
    }
    if (message.health !== 0) {
      writer.uint32(56).int32(message.health);
    }
    if (message.superGauge !== 0) {
      writer.uint32(64).int32(message.superGauge);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.character = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.frame = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.health = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.superGauge = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerState {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      character: isSet(object.character) ? globalThis.String(object.character) : "",
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      frame: isSet(object.frame) ? globalThis.Number(object.frame) : 0,
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      superGauge: isSet(object.superGauge) ? globalThis.Number(object.superGauge) : 0,
    };
  },

  toJSON(message: PlayerState): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.character !== "") {
      obj.character = message.character;
    }
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.frame !== 0) {
      obj.frame = Math.round(message.frame);
    }
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.superGauge !== 0) {
      obj.superGauge = Math.round(message.superGauge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerState>, I>>(base?: I): PlayerState {
    return PlayerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerState>, I>>(object: I): PlayerState {
    const message = createBasePlayerState();
    message.id = object.id ?? 0;
    message.character = object.character ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.action = object.action ?? "";
    message.frame = object.frame ?? 0;
    message.health = object.health ?? 0;
    message.superGauge = object.superGauge ?? 0;
    return message;
  },
};

function createBaseGameState(): GameState {
  return { matchId: "", timer: 0, players: [], winnerId: undefined };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchId !== "") {
      writer.uint32(10).string(message.matchId);
    }
    if (message.timer !== 0) {
      writer.uint32(16).int32(message.timer);
    }
    for (const v of message.players) {
      PlayerState.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.winnerId !== undefined) {
      writer.uint32(32).int32(message.winnerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matchId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timer = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.players.push(PlayerState.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.winnerId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "",
      timer: isSet(object.timer) ? globalThis.Number(object.timer) : 0,
      players: globalThis.Array.isArray(object?.players) ? object.players.map((e: any) => PlayerState.fromJSON(e)) : [],
      winnerId: isSet(object.winnerId) ? globalThis.Number(object.winnerId) : undefined,
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.matchId !== "") {
      obj.matchId = message.matchId;
    }
    if (message.timer !== 0) {
      obj.timer = Math.round(message.timer);
    }
    if (message.players?.length) {
      obj.players = message.players.map((e) => PlayerState.toJSON(e));
    }
    if (message.winnerId !== undefined) {
      obj.winnerId = Math.round(message.winnerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState();
    message.matchId = object.matchId ?? "";
    message.timer = object.timer ?? 0;
    message.players = object.players?.map((e) => PlayerState.fromPartial(e)) || [];
    message.winnerId = object.winnerId ?? undefined;
    return message;
  },
};

function createBaseGameStateRequest(): GameStateRequest {
  return { matchId: "", player1Id: 0, player2Id: 0 };
}

export const GameStateRequest: MessageFns<GameStateRequest> = {
  encode(message: GameStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchId !== "") {
      writer.uint32(10).string(message.matchId);
    }
    if (message.player1Id !== 0) {
      writer.uint32(16).int32(message.player1Id);
    }
    if (message.player2Id !== 0) {
      writer.uint32(24).int32(message.player2Id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matchId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.player1Id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.player2Id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateRequest {
    return {
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "",
      player1Id: isSet(object.player1Id) ? globalThis.Number(object.player1Id) : 0,
      player2Id: isSet(object.player2Id) ? globalThis.Number(object.player2Id) : 0,
    };
  },

  toJSON(message: GameStateRequest): unknown {
    const obj: any = {};
    if (message.matchId !== "") {
      obj.matchId = message.matchId;
    }
    if (message.player1Id !== 0) {
      obj.player1Id = Math.round(message.player1Id);
    }
    if (message.player2Id !== 0) {
      obj.player2Id = Math.round(message.player2Id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateRequest>, I>>(base?: I): GameStateRequest {
    return GameStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateRequest>, I>>(object: I): GameStateRequest {
    const message = createBaseGameStateRequest();
    message.matchId = object.matchId ?? "";
    message.player1Id = object.player1Id ?? 0;
    message.player2Id = object.player2Id ?? 0;
    return message;
  },
};


export const GameServiceDefinition = {
  name: "GameService",
  fullName: "game.GameService",
  methods: {
    /** Server-side streaming RPC to send game state updates */
    streamGameState: {
      name: "StreamGameState",
      requestType: GameStateRequest,
      requestStream: false,
      responseType: GameState,
      responseStream: true,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
