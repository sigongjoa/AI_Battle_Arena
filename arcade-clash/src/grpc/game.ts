// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import * as grpc from "grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";

export const protobufPackage = "game";

export interface PlayerState {
  health: number;
  superGauge: number;
  positionX: number;
  positionY: number;
  currentAction: string;
}

export interface GameState {
  matchId: string;
  timer: number;
  player1?: PlayerState | undefined;
  player2?:
    | PlayerState
    | undefined;
  /** Use optional for nullable fields */
  winnerId?: number | undefined;
}

/** Request message for streaming game state */
export interface GameStateRequest {
  matchId: string;
  player1Id: number;
  player2Id: number;
}

function createBasePlayerState(): PlayerState {
  return { health: 0, superGauge: 0, positionX: 0, positionY: 0, currentAction: "" };
}

export const PlayerState: MessageFns<PlayerState> = {
  encode(message: PlayerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.health !== 0) {
      writer.uint32(8).int32(message.health);
    }
    if (message.superGauge !== 0) {
      writer.uint32(16).int32(message.superGauge);
    }
    if (message.positionX !== 0) {
      writer.uint32(24).int32(message.positionX);
    }
    if (message.positionY !== 0) {
      writer.uint32(32).int32(message.positionY);
    }
    if (message.currentAction !== "") {
      writer.uint32(42).string(message.currentAction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.health = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.superGauge = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.positionX = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.positionY = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currentAction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerState {
    return {
      health: isSet(object.health) ? globalThis.Number(object.health) : 0,
      superGauge: isSet(object.superGauge) ? globalThis.Number(object.superGauge) : 0,
      positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
      positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
      currentAction: isSet(object.currentAction) ? globalThis.String(object.currentAction) : "",
    };
  },

  toJSON(message: PlayerState): unknown {
    const obj: any = {};
    if (message.health !== 0) {
      obj.health = Math.round(message.health);
    }
    if (message.superGauge !== 0) {
      obj.superGauge = Math.round(message.superGauge);
    }
    if (message.positionX !== 0) {
      obj.positionX = Math.round(message.positionX);
    }
    if (message.positionY !== 0) {
      obj.positionY = Math.round(message.positionY);
    }
    if (message.currentAction !== "") {
      obj.currentAction = message.currentAction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerState>, I>>(base?: I): PlayerState {
    return PlayerState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerState>, I>>(object: I): PlayerState {
    const message = createBasePlayerState();
    message.health = object.health ?? 0;
    message.superGauge = object.superGauge ?? 0;
    message.positionX = object.positionX ?? 0;
    message.positionY = object.positionY ?? 0;
    message.currentAction = object.currentAction ?? "";
    return message;
  },
};

function createBaseGameState(): GameState {
  return { matchId: "", timer: 0, player1: undefined, player2: undefined, winnerId: undefined };
}

export const GameState: MessageFns<GameState> = {
  encode(message: GameState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchId !== "") {
      writer.uint32(10).string(message.matchId);
    }
    if (message.timer !== 0) {
      writer.uint32(16).int32(message.timer);
    }
    if (message.player1 !== undefined) {
      PlayerState.encode(message.player1, writer.uint32(26).fork()).join();
    }
    if (message.player2 !== undefined) {
      PlayerState.encode(message.player2, writer.uint32(34).fork()).join();
    }
    if (message.winnerId !== undefined) {
      writer.uint32(40).int32(message.winnerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matchId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timer = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.player1 = PlayerState.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.player2 = PlayerState.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.winnerId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameState {
    return {
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "",
      timer: isSet(object.timer) ? globalThis.Number(object.timer) : 0,
      player1: isSet(object.player1) ? PlayerState.fromJSON(object.player1) : undefined,
      player2: isSet(object.player2) ? PlayerState.fromJSON(object.player2) : undefined,
      winnerId: isSet(object.winnerId) ? globalThis.Number(object.winnerId) : undefined,
    };
  },

  toJSON(message: GameState): unknown {
    const obj: any = {};
    if (message.matchId !== "") {
      obj.matchId = message.matchId;
    }
    if (message.timer !== 0) {
      obj.timer = Math.round(message.timer);
    }
    if (message.player1 !== undefined) {
      obj.player1 = PlayerState.toJSON(message.player1);
    }
    if (message.player2 !== undefined) {
      obj.player2 = PlayerState.toJSON(message.player2);
    }
    if (message.winnerId !== undefined) {
      obj.winnerId = Math.round(message.winnerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameState>, I>>(base?: I): GameState {
    return GameState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameState>, I>>(object: I): GameState {
    const message = createBaseGameState();
    message.matchId = object.matchId ?? "";
    message.timer = object.timer ?? 0;
    message.player1 = (object.player1 !== undefined && object.player1 !== null)
      ? PlayerState.fromPartial(object.player1)
      : undefined;
    message.player2 = (object.player2 !== undefined && object.player2 !== null)
      ? PlayerState.fromPartial(object.player2)
      : undefined;
    message.winnerId = object.winnerId ?? undefined;
    return message;
  },
};

function createBaseGameStateRequest(): GameStateRequest {
  return { matchId: "", player1Id: 0, player2Id: 0 };
}

export const GameStateRequest: MessageFns<GameStateRequest> = {
  encode(message: GameStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matchId !== "") {
      writer.uint32(10).string(message.matchId);
    }
    if (message.player1Id !== 0) {
      writer.uint32(16).int32(message.player1Id);
    }
    if (message.player2Id !== 0) {
      writer.uint32(24).int32(message.player2Id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matchId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.player1Id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.player2Id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateRequest {
    return {
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "",
      player1Id: isSet(object.player1Id) ? globalThis.Number(object.player1Id) : 0,
      player2Id: isSet(object.player2Id) ? globalThis.Number(object.player2Id) : 0,
    };
  },

  toJSON(message: GameStateRequest): unknown {
    const obj: any = {};
    if (message.matchId !== "") {
      obj.matchId = message.matchId;
    }
    if (message.player1Id !== 0) {
      obj.player1Id = Math.round(message.player1Id);
    }
    if (message.player2Id !== 0) {
      obj.player2Id = Math.round(message.player2Id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateRequest>, I>>(base?: I): GameStateRequest {
    return GameStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateRequest>, I>>(object: I): GameStateRequest {
    const message = createBaseGameStateRequest();
    message.matchId = object.matchId ?? "";
    message.player1Id = object.player1Id ?? 0;
    message.player2Id = object.player2Id ?? 0;
    return message;
  },
};

export interface GameService {
  /** Server-side streaming RPC to send game state updates */
  StreamGameState(request: DeepPartial<GameStateRequest>, metadata?: grpc.Metadata): Observable<GameState>;
}

export class GameServiceClientImpl implements GameService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.StreamGameState = this.StreamGameState.bind(this);
  }

  StreamGameState(request: DeepPartial<GameStateRequest>, metadata?: grpc.Metadata): Observable<GameState> {
    return this.rpc.invoke(GameServiceStreamGameStateDesc, GameStateRequest.fromPartial(request), metadata);
  }
}

export const GameServiceDesc = { serviceName: "game.GameService" };

export const GameServiceStreamGameStateDesc: UnaryMethodDefinitionish = {
  methodName: "StreamGameState",
  service: GameServiceDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return GameStateRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GameState.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
