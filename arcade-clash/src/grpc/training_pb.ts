// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file training.proto (package training, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message training.TrainingMetrics
 */
export class TrainingMetrics extends Message<TrainingMetrics> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  /**
   * @generated from field: int32 step = 2;
   */
  step = 0;

  /**
   * @generated from field: int32 episode = 3;
   */
  episode = 0;

  /**
   * @generated from field: float loss = 4;
   */
  loss = 0;

  /**
   * @generated from field: float reward = 5;
   */
  reward = 0;

  /**
   * @generated from field: optional float q_value = 6;
   */
  qValue?: number;

  /**
   * @generated from field: int32 episode_length = 7;
   */
  episodeLength = 0;

  constructor(data?: PartialMessage<TrainingMetrics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "training.TrainingMetrics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "step", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "episode", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "loss", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 5, name: "reward", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "q_value", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "episode_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrainingMetrics {
    return new TrainingMetrics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrainingMetrics {
    return new TrainingMetrics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrainingMetrics {
    return new TrainingMetrics().fromJsonString(jsonString, options);
  }

  static equals(a: TrainingMetrics | PlainMessage<TrainingMetrics> | undefined, b: TrainingMetrics | PlainMessage<TrainingMetrics> | undefined): boolean {
    return proto3.util.equals(TrainingMetrics, a, b);
  }
}

/**
 * Request message for streaming training metrics
 *
 * @generated from message training.TrainingMetricsRequest
 */
export class TrainingMetricsRequest extends Message<TrainingMetricsRequest> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId = "";

  constructor(data?: PartialMessage<TrainingMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "training.TrainingMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrainingMetricsRequest {
    return new TrainingMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrainingMetricsRequest {
    return new TrainingMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrainingMetricsRequest {
    return new TrainingMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TrainingMetricsRequest | PlainMessage<TrainingMetricsRequest> | undefined, b: TrainingMetricsRequest | PlainMessage<TrainingMetricsRequest> | undefined): boolean {
    return proto3.util.equals(TrainingMetricsRequest, a, b);
  }
}

