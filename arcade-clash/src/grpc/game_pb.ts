// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file game.proto (package game, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message game.PlayerState
 */
export class PlayerState extends Message<PlayerState> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * e.g., "RYU", "KEN"
   *
   * @generated from field: string character = 2;
   */
  character = "";

  /**
   * @generated from field: int32 x = 3;
   */
  x = 0;

  /**
   * @generated from field: int32 y = 4;
   */
  y = 0;

  /**
   * e.g., "idle", "punch", "kick"
   *
   * @generated from field: string action = 5;
   */
  action = "";

  /**
   * @generated from field: int32 frame = 6;
   */
  frame = 0;

  /**
   * @generated from field: int32 health = 7;
   */
  health = 0;

  /**
   * @generated from field: string status = 8;
   */
  status = "";

  /**
   * @generated from field: int32 super_gauge = 9;
   */
  superGauge = 0;

  constructor(data?: PartialMessage<PlayerState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.PlayerState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "character", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "x", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "y", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "frame", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "health", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "super_gauge", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerState {
    return new PlayerState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerState {
    return new PlayerState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerState {
    return new PlayerState().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerState | PlainMessage<PlayerState> | undefined, b: PlayerState | PlainMessage<PlayerState> | undefined): boolean {
    return proto3.util.equals(PlayerState, a, b);
  }
}

/**
 * @generated from message game.GameState
 */
export class GameState extends Message<GameState> {
  /**
   * @generated from field: string match_id = 1;
   */
  matchId = "";

  /**
   * @generated from field: int32 timer = 2;
   */
  timer = 0;

  /**
   * @generated from field: repeated game.PlayerState players = 3;
   */
  players: PlayerState[] = [];

  /**
   * @generated from field: optional int32 winner_id = 4;
   */
  winnerId?: number;

  constructor(data?: PartialMessage<GameState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.GameState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timer", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "players", kind: "message", T: PlayerState, repeated: true },
    { no: 4, name: "winner_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameState {
    return new GameState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameState {
    return new GameState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameState {
    return new GameState().fromJsonString(jsonString, options);
  }

  static equals(a: GameState | PlainMessage<GameState> | undefined, b: GameState | PlainMessage<GameState> | undefined): boolean {
    return proto3.util.equals(GameState, a, b);
  }
}

/**
 * Request message for streaming game state
 *
 * @generated from message game.GameStateRequest
 */
export class GameStateRequest extends Message<GameStateRequest> {
  /**
   * @generated from field: string match_id = 1;
   */
  matchId = "";

  /**
   * @generated from field: int32 player1_id = 2;
   */
  player1Id = 0;

  /**
   * @generated from field: int32 player2_id = 3;
   */
  player2Id = 0;

  constructor(data?: PartialMessage<GameStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.GameStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player1_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "player2_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameStateRequest {
    return new GameStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameStateRequest {
    return new GameStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameStateRequest {
    return new GameStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GameStateRequest | PlainMessage<GameStateRequest> | undefined, b: GameStateRequest | PlainMessage<GameStateRequest> | undefined): boolean {
    return proto3.util.equals(GameStateRequest, a, b);
  }
}

/**
 * @generated from message game.PlayerInput
 */
export class PlayerInput extends Message<PlayerInput> {
  /**
   * ID of the player being controlled (e.g., 1)
   *
   * @generated from field: int32 player_id = 1;
   */
  playerId = 0;

  /**
   * Key press or release
   *
   * @generated from field: game.PlayerInput.KeyAction key_action = 2;
   */
  keyAction = PlayerInput_KeyAction.PRESS;

  /**
   * The key that was pressed (e.g., "ArrowUp", "a")
   *
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * The ID of the match this input belongs to
   *
   * @generated from field: string match_id = 4;
   */
  matchId = "";

  constructor(data?: PartialMessage<PlayerInput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "game.PlayerInput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "key_action", kind: "enum", T: proto3.getEnumType(PlayerInput_KeyAction) },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "match_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerInput {
    return new PlayerInput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerInput {
    return new PlayerInput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerInput {
    return new PlayerInput().fromJsonString(jsonString, options);
  }

  static equals(a: PlayerInput | PlainMessage<PlayerInput> | undefined, b: PlayerInput | PlainMessage<PlayerInput> | undefined): boolean {
    return proto3.util.equals(PlayerInput, a, b);
  }
}

/**
 * @generated from enum game.PlayerInput.KeyAction
 */
export enum PlayerInput_KeyAction {
  /**
   * @generated from enum value: PRESS = 0;
   */
  PRESS = 0,

  /**
   * @generated from enum value: RELEASE = 1;
   */
  RELEASE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PlayerInput_KeyAction)
proto3.util.setEnumType(PlayerInput_KeyAction, "game.PlayerInput.KeyAction", [
  { no: 0, name: "PRESS" },
  { no: 1, name: "RELEASE" },
]);

