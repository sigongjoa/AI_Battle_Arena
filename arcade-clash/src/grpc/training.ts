// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: training.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import * as grpc from "grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Observable } from "rxjs";
import { share } from "rxjs/operators";

export const protobufPackage = "training";

export interface TrainingMetrics {
  sessionId: string;
  step: number;
  episode: number;
  loss: number;
  reward: number;
  qValue?: number | undefined;
  episodeLength: number;
}

/** Request message for streaming training metrics */
export interface TrainingMetricsRequest {
  sessionId: string;
}

function createBaseTrainingMetrics(): TrainingMetrics {
  return { sessionId: "", step: 0, episode: 0, loss: 0, reward: 0, qValue: undefined, episodeLength: 0 };
}

export const TrainingMetrics: MessageFns<TrainingMetrics> = {
  encode(message: TrainingMetrics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.step !== 0) {
      writer.uint32(16).int32(message.step);
    }
    if (message.episode !== 0) {
      writer.uint32(24).int32(message.episode);
    }
    if (message.loss !== 0) {
      writer.uint32(37).float(message.loss);
    }
    if (message.reward !== 0) {
      writer.uint32(45).float(message.reward);
    }
    if (message.qValue !== undefined) {
      writer.uint32(53).float(message.qValue);
    }
    if (message.episodeLength !== 0) {
      writer.uint32(56).int32(message.episodeLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainingMetrics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainingMetrics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.step = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.episode = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.loss = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.reward = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.qValue = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.episodeLength = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainingMetrics {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      step: isSet(object.step) ? globalThis.Number(object.step) : 0,
      episode: isSet(object.episode) ? globalThis.Number(object.episode) : 0,
      loss: isSet(object.loss) ? globalThis.Number(object.loss) : 0,
      reward: isSet(object.reward) ? globalThis.Number(object.reward) : 0,
      qValue: isSet(object.qValue) ? globalThis.Number(object.qValue) : undefined,
      episodeLength: isSet(object.episodeLength) ? globalThis.Number(object.episodeLength) : 0,
    };
  },

  toJSON(message: TrainingMetrics): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.step !== 0) {
      obj.step = Math.round(message.step);
    }
    if (message.episode !== 0) {
      obj.episode = Math.round(message.episode);
    }
    if (message.loss !== 0) {
      obj.loss = message.loss;
    }
    if (message.reward !== 0) {
      obj.reward = message.reward;
    }
    if (message.qValue !== undefined) {
      obj.qValue = message.qValue;
    }
    if (message.episodeLength !== 0) {
      obj.episodeLength = Math.round(message.episodeLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrainingMetrics>, I>>(base?: I): TrainingMetrics {
    return TrainingMetrics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrainingMetrics>, I>>(object: I): TrainingMetrics {
    const message = createBaseTrainingMetrics();
    message.sessionId = object.sessionId ?? "";
    message.step = object.step ?? 0;
    message.episode = object.episode ?? 0;
    message.loss = object.loss ?? 0;
    message.reward = object.reward ?? 0;
    message.qValue = object.qValue ?? undefined;
    message.episodeLength = object.episodeLength ?? 0;
    return message;
  },
};

function createBaseTrainingMetricsRequest(): TrainingMetricsRequest {
  return { sessionId: "" };
}

export const TrainingMetricsRequest: MessageFns<TrainingMetricsRequest> = {
  encode(message: TrainingMetricsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrainingMetricsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrainingMetricsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrainingMetricsRequest {
    return { sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "" };
  },

  toJSON(message: TrainingMetricsRequest): unknown {
    const obj: any = {};
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrainingMetricsRequest>, I>>(base?: I): TrainingMetricsRequest {
    return TrainingMetricsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrainingMetricsRequest>, I>>(object: I): TrainingMetricsRequest {
    const message = createBaseTrainingMetricsRequest();
    message.sessionId = object.sessionId ?? "";
    return message;
  },
};

export interface TrainingService {
  /** Server-side streaming RPC to send training metrics updates */
  StreamTrainingMetrics(
    request: DeepPartial<TrainingMetricsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<TrainingMetrics>;
}

export class TrainingServiceClientImpl implements TrainingService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.StreamTrainingMetrics = this.StreamTrainingMetrics.bind(this);
  }

  StreamTrainingMetrics(
    request: DeepPartial<TrainingMetricsRequest>,
    metadata?: grpc.Metadata,
  ): Observable<TrainingMetrics> {
    return this.rpc.invoke(
      TrainingServiceStreamTrainingMetricsDesc,
      TrainingMetricsRequest.fromPartial(request),
      metadata,
    );
  }
}

export const TrainingServiceDesc = { serviceName: "training.TrainingService" };

export const TrainingServiceStreamTrainingMetricsDesc: UnaryMethodDefinitionish = {
  methodName: "StreamTrainingMetrics",
  service: TrainingServiceDesc,
  requestStream: false,
  responseStream: true,
  requestType: {
    serializeBinary() {
      return TrainingMetricsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = TrainingMetrics.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;
    streamingTransport?: grpc.TransportFactory;
    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;
      streamingTransport?: grpc.TransportFactory;
      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }

  invoke<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Observable<any> {
    const upStreamCodes = this.options.upStreamRetryCodes ?? [];
    const DEFAULT_TIMEOUT_TIME: number = 3_000;
    const request = { ..._request, ...methodDesc.requestType };
    const transport = this.options.streamingTransport ?? this.options.transport;
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Observable((observer) => {
      const upStream = () => {
        const client = grpc.invoke(methodDesc, {
          host: this.host,
          request,
          ...(transport !== undefined ? { transport } : {}),
          metadata: maybeCombinedMetadata ?? {},
          debug: this.options.debug ?? false,
          onMessage: (next) => observer.next(next),
          onEnd: (code: grpc.Code, message: string, trailers: grpc.Metadata) => {
            if (code === 0) {
              observer.complete();
            } else if (upStreamCodes.includes(code)) {
              setTimeout(upStream, DEFAULT_TIMEOUT_TIME);
            } else {
              const err = new Error(message) as any;
              err.code = code;
              err.metadata = trailers;
              observer.error(err);
            }
          },
        });
        observer.add(() => client.close());
      };
      upStream();
    }).pipe(share());
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
