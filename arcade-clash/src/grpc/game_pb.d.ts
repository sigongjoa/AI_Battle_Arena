// @generated by protoc-gen-es v1.10.1
// @generated from file game.proto (package game, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message game.PlayerState
 */
export declare class PlayerState extends Message<PlayerState> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId: string;

  /**
   * e.g., "RYU", "KEN"
   *
   * @generated from field: string character = 2;
   */
  character: string;

  /**
   * @generated from field: int32 x = 3;
   */
  x: number;

  /**
   * @generated from field: int32 y = 4;
   */
  y: number;

  /**
   * e.g., "idle", "punch", "kick"
   *
   * @generated from field: string action = 5;
   */
  action: string;

  /**
   * @generated from field: int32 frame = 6;
   */
  frame: number;

  /**
   * @generated from field: int32 health = 7;
   */
  health: number;

  /**
   * @generated from field: string status = 8;
   */
  status: string;

  /**
   * @generated from field: int32 super_gauge = 9;
   */
  superGauge: number;

  constructor(data?: PartialMessage<PlayerState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.PlayerState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerState;

  static equals(a: PlayerState | PlainMessage<PlayerState> | undefined, b: PlayerState | PlainMessage<PlayerState> | undefined): boolean;
}

/**
 * @generated from message game.GameState
 */
export declare class GameState extends Message<GameState> {
  /**
   * @generated from field: string match_id = 1;
   */
  matchId: string;

  /**
   * @generated from field: int32 timer = 2;
   */
  timer: number;

  /**
   * @generated from field: repeated game.PlayerState players = 3;
   */
  players: PlayerState[];

  /**
   * @generated from field: optional int32 winner_id = 4;
   */
  winnerId?: number;

  constructor(data?: PartialMessage<GameState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.GameState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameState;

  static equals(a: GameState | PlainMessage<GameState> | undefined, b: GameState | PlainMessage<GameState> | undefined): boolean;
}

/**
 * Request message for streaming game state
 *
 * @generated from message game.GameStateRequest
 */
export declare class GameStateRequest extends Message<GameStateRequest> {
  /**
   * @generated from field: string match_id = 1;
   */
  matchId: string;

  /**
   * @generated from field: int32 player1_id = 2;
   */
  player1Id: number;

  /**
   * @generated from field: int32 player2_id = 3;
   */
  player2Id: number;

  constructor(data?: PartialMessage<GameStateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.GameStateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameStateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameStateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameStateRequest;

  static equals(a: GameStateRequest | PlainMessage<GameStateRequest> | undefined, b: GameStateRequest | PlainMessage<GameStateRequest> | undefined): boolean;
}

/**
 * @generated from message game.PlayerInput
 */
export declare class PlayerInput extends Message<PlayerInput> {
  /**
   * ID of the player being controlled (e.g., 1)
   *
   * @generated from field: int32 player_id = 1;
   */
  playerId: number;

  /**
   * Key press or release
   *
   * @generated from field: game.PlayerInput.KeyAction key_action = 2;
   */
  keyAction: PlayerInput_KeyAction;

  /**
   * The key that was pressed (e.g., "ArrowUp", "a")
   *
   * @generated from field: string key = 3;
   */
  key: string;

  /**
   * The ID of the match this input belongs to
   *
   * @generated from field: string match_id = 4;
   */
  matchId: string;

  constructor(data?: PartialMessage<PlayerInput>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "game.PlayerInput";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayerInput;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayerInput;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayerInput;

  static equals(a: PlayerInput | PlainMessage<PlayerInput> | undefined, b: PlayerInput | PlainMessage<PlayerInput> | undefined): boolean;
}

/**
 * @generated from enum game.PlayerInput.KeyAction
 */
export declare enum PlayerInput_KeyAction {
  /**
   * @generated from enum value: PRESS = 0;
   */
  PRESS = 0,

  /**
   * @generated from enum value: RELEASE = 1;
   */
  RELEASE = 1,
}

