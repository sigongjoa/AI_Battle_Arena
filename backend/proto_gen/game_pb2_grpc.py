# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import game_pb2 as game__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class GameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamGameState = channel.unary_stream(
                '/game.GameService/StreamGameState',
                request_serializer=game__pb2.GameStateRequest.SerializeToString,
                response_deserializer=game__pb2.GameState.FromString,
                )


class GameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamGameState(self, request, context):
        """Server-side streaming RPC to send game state updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamGameState': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamGameState,
                    request_deserializer=game__pb2.GameStateRequest.FromString,
                    response_serializer=game__pb2.GameState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/game.GameService/StreamGameState',
            game__pb2.GameStateRequest.SerializeToString,
            game__pb2.GameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ControllServiceStub(object):
    """New service for player control
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamPlayerInput = channel.stream_unary(
                '/game.ControllService/StreamPlayerInput',
                request_serializer=game__pb2.PlayerInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class ControllServiceServicer(object):
    """New service for player control
    """

    def StreamPlayerInput(self, request_iterator, context):
        """Client-side streaming RPC: Continuously send player input to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamPlayerInput': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamPlayerInput,
                    request_deserializer=game__pb2.PlayerInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.ControllService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControllService(object):
    """New service for player control
    """

    @staticmethod
    def StreamPlayerInput(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/game.ControllService/StreamPlayerInput',
            game__pb2.PlayerInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
